/*
 * TJ Online 2nd-hand Trading
 *
 * Springboot API Design for Tongji Online Second-hand Trading Platform
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ChatApiController : ControllerBase
    { 
        /// <summary>
        /// add a new chatting message
        /// </summary>
        /// <param name="body">Created a new chatting message</param>
        /// <response code="0">successful operation</response>
        [HttpPost]
        [Route("/JEEgroup/JEEwork/1.0.0/chat/addMessage")]
        [ValidateModelState]
        [SwaggerOperation("AddMessage")]
        public virtual IActionResult AddMessage([FromBody]Chat body)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// get all contacts of a user
        /// </summary>
        /// <param name="userId">user id</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid userid supplied</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/JEEgroup/JEEwork/1.0.0/chat/getContacts/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("GetContactsById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ComponentsrequestBodiesContacts), description: "successful operation")]
        public virtual IActionResult GetContactsById([FromRoute][Required]int? userId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ComponentsrequestBodiesContacts));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"{}\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ComponentsrequestBodiesContacts>(exampleJson)
                        : default(ComponentsrequestBodiesContacts);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// get all messages between two users
        /// </summary>
        /// <param name="senderId">sender user id</param>
        /// <param name="receiverId">receiver user id</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid userid supplied</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/JEEgroup/JEEwork/1.0.0/chat/getMessages/{senderId}/{receiverId}")]
        [ValidateModelState]
        [SwaggerOperation("GetMessages")]
        [SwaggerResponse(statusCode: 200, type: typeof(ComponentsrequestBodiesContacts), description: "successful operation")]
        public virtual IActionResult GetMessages([FromRoute][Required]int? senderId, [FromRoute][Required]int? receiverId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ComponentsrequestBodiesContacts));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"{}\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ComponentsrequestBodiesContacts>(exampleJson)
                        : default(ComponentsrequestBodiesContacts);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
