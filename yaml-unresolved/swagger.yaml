openapi: 3.0.0
info:
  version: 1.0.0
  title: TJ Online 2nd-hand Trading
  description: Springboot API Design for Tongji Online Second-hand Trading Platform
tags:
  # 每个功能点一个tag
  - name: account
    description: 账户，包含未学生认证的
  - name: user
    description: 用户，已学生认证
  - name: chat
    description: chatting
  - name: favorite
    description: user's favorite
  - name: search
    description: search for goods
  - name: q_post
    description: user’s q_posts
  - name: afg_post
    description: user’s afg_posts
  - name: rg_post
    description: user’s rg_posts
  - name: postanswer
    description: user’s postanswers
    
paths:
  '/favorite/add':
    post:
      tags:
        - favorite
      summary: add a new favorite
      operationId: addFavorite
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFavorite'
        description: a new favorite
        required: true
  '/favorite/get':
    get:
      tags:
        - favorite
      summary: get all favorites of a user
      operationId: getFavoritesById
      # parameters:
      #   - name: userId
      #     in: path
      #     description: user id
      #     required: true
      #     schema:
      #       type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteList'
            application/xml:
              schema:
                $ref: '#/components/schemas/FavoriteList'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/favorite/remove/{goodId}':
    delete:
      tags:
        - favorite
      summary: remove a favorite
      operationId: deleteFavor
      parameters:
        # - name: userId
        #   in: path
        #   description: user id
        #   required: true
        #   schema:
        #     type: integer
        - name: goodId
          in: path
          description: good id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Not found
  '/chat/addMessage':
    post:
      tags:
        - chat
      summary: add a new chatting message
      operationId: addMessage
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
        description: Created a new chatting message
        required: true
  '/chat/getContacts':
    get:
      tags:
        - chat
      summary: get all contacts of a user
      operationId: getContactsById
      # parameters:
      #   - name: userId
      #     in: path
      #     description: user id
      #     required: true
      #     schema:
      #       type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
            application/xml:
              schema:
                $ref: '#/components/schemas/Contacts'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/chat/getMessages':
    get:
      tags:
        - chat
      summary: get all messages between two users
      operationId: getMessages
      # parameters:
      #   - name: senderId
      #     in: path
      #     description: sender user id
      #     required: true
      #     schema:
      #       type: integer
      #   - name: receiverId
      #     in: path
      #     description: receiver user id
      #     required: true
      #     schema:
      #       type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Messages'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/search/GetRecommend':
    get:
      tags:
        - search
      summary: get first page recommend for a user
      operationId: getRecommendById
      # parameters:
      #   - name: userId
      #     in: path
      #     description: user id
      #     required: true
      #     schema:
      #       type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodList'
            application/xml:
              schema:
                $ref: '#/components/schemas/GoodList'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/search':
    post: # 有点不符合RESTful，不过为了方便就这样吧
      tags:
        - search
      summary: search goods by name, tags and price
      operationId: searchGoods
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodList'
            application/xml:
              schema:
                $ref: '#/components/schemas/GoodList'
        '400':
          description: Invalid string supplied
        '404':
          description: not found
      requestBody:
        $ref: '#/components/requestBodies/Search'

     
  '/user/add':
    post:
      tags:
        - user
      summary: 学生认证后增加用户
      operationId: addUser
      responses:
        '200':
          description: success
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  
  '/user/update':
    post:
      tags:
        - user
      summary: 修改用户个人信息
      operationId: updateUser
      responses:
        '200':
          description: success
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              
  '/user/get':
    post:
      tags:
        - user
      summary: 获取用户个人信息
      operationId: getUser
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid string supplied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
              
  '/q_post/add':
    post:
      tags:
        - q_post
      summary: add a new q_post
      operationId: addQPost
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionPost'
        description: a new q_post
        required: true
   
  '/q_post/get/{userId}':
    get:
      tags:
        - q_post
      summary: get all q_post of a user
      operationId: getQPostById
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionPostList'
            application/xml:
              schema:
                $ref: '#/components/schemas/QuestionPost'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/q_post/remove/{userId}/{QPostId}':
    delete:
      tags:
        - q_post
      summary: remove a q_post
      operationId: deleteQPost
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: QPostId
          in: path
          description: Qpost id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Not found
  
  '/afg_post/add':
    post:
      tags:
        - afg_post
      summary: add a new afg_post
      operationId: addAFGPost
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskForGoodsPost'
        description: a new afg_post
        required: true
   
  '/afg_post/get/{userId}':
    get:
      tags:
        - afg_post
      summary: get all afg_post of a user
      operationId: getAFGPostById
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskForGoodsPostList'
            application/xml:
              schema:
                $ref: '#/components/schemas/AskForGoodsPost'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
          
  '/afg_post/remove/{userId}/{AFGPostId}':
    delete:
      tags:
        - afg_post
      summary: remove a afg_post
      operationId: deleteAFGPost
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: AFGPostId
          in: path
          description: afg_post id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Not found            

  '/rg_post/add':
    post:
      tags:
        - rg_post
      summary: add a new rg_post
      operationId: addRGPost
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendGoodsPost'
        description: a new afg_post
        required: true

  '/rg_post/get/{userId}':
    get:
      tags:
        - rg_post
      summary: get all rg_post of a user
      operationId: getRGPostById
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendGoodsPostList'
            application/xml:
              schema:
                $ref: '#/components/schemas/RecommendGoodsPost'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/rg_post/remove/{userId}/{RGPostId}':
    delete:
      tags:
        - rg_post
      summary: remove a rg_post
      operationId: deleteRGPost
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: RGPostId
          in: path
          description: rg_post id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Not found   
          

  '/postanswer/add':
    post:
      tags:
        - postanswer
      summary: add a new postanswer
      operationId: addPostanswer
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionPostReply'
        description: a new postanswer
        required: true
   
  '/postanswer/get/{QPostId}':
    get:
      tags:
        - postanswer
      summary: get all postanswer of a user
      operationId: getPostanswerById
      parameters:
        - name: QPostId
          in: path
          description: qpost id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionPostReplyList'
            application/xml:
              schema:
                $ref: '#/components/schemas/QuestionPostReply'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
          
  '/postanswer/remove/{userId}/{PostanswerId}':
    delete:
      tags:
        - postanswer
      summary: remove a postanswer
      operationId: deletePostanswer
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: PostanswerId
          in: path
          description: postanswer id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Not found            
  '/Good/remove/{userId}/{goodId}':
    delete:
      tags:
        - Good
      summary: remove a Good
      operationId: deleteGood
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: goodId
          in: path
          description: good id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Not found
  '/Good/revise/{userId}/{goodId}':
    put:
      tags:
        - Good
      summary: revise a Good's information
      operationId: reviseGood
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: goodId
          in: path
          description: good id
          required: true
          schema:
            type: integer
            format: int64
        - name: good
          in: query
          description: The good to create.
          schema:
            $ref: '#/components/schemas/Good'
          required: true      
      responses:
        '200':
          description: Good successfully revised
        '400':
          description: Goods couldn't have been revised.
          
  '/Good/add/{userId}':    
    post:
      tags:
        - Good
      summary: add a new Good
      operationId: addGood
      parameters:
        - name: userId
          in: path
          description: userId
          schema:
            type: integer
          required: true
        - name: good
          in: query
          description: The good to create.
          schema:
            $ref: '#/components/schemas/Good'
          required: true
      responses:
        '200':
          description: Good successfully created
        '400':
          description: Goods couldn't have been created.
          
  '/Good/getList/{userId}/{pageId}/{pageSize}':
    get:
      tags:
        - Good
      summary: get goodlist for a user
      operationId: getGoodList
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: pageId
          in: path
          description: page id
          required: true
          schema:
            type: integer
        - name: pageSize
          in: path
          description: the number of good per page
          required: true
          schema:
            type: integer            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - practicalnum
                  - page_id
                  - goodlist
                properties:
                  practicalnum:
                    type: integer
                    default: 10
                  page_id:
                    type: integer
                    default: 1                    
                  goodlist:
                    $ref: '#/components/schemas/GoodList'                   
            application/xml:
              schema:
                $ref: '#/components/schemas/GoodList'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found

  '/Good/getItem/{userId}/{goodId}':
    get:
      tags:
        - Good
      summary: get good's concrete info for a user
      operationId: getGoodItem
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: goodId
          in: path
          description: good id
          required: true
          schema:
            type: integer
         
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Good'             
            application/xml:
              schema:
                $ref: '#/components/schemas/Good'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found

  

##################### Components ###############################
components:
  schemas:
  ##############  以下是数据库表对应的model   ####################
    ###### Account ######
    Account:
      type: object
      properties:
        accountId:
          type: integer
          example: 0
        openId:
          type: string
          example: "open id from wx"
        authenticated:
          type: boolean
          default: 0
        nickName:
          type: string
          example: "nick name"
        createTime:
          type: string
          format: date
          example: "2020-12-12 00:00:00"
        lastVisitTime:
          type: string
          format: date
          example: "2020-12-12 00:00:00"
      xml:
        name: Account
    
    ###### Chat ######
    Chat:
      type: object
      properties:
        sender_id:
          type: integer
          example: 10
        receiver_id:
          example: 13
          type: integer
        time:
          type: string
          format: date-time
          example: "2020-12-12 00:00:00"
        content:
          type: string
          example: hi！
      xml:
        name: Chat
        
    ###### User ######
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 0
        nickName:
          type: string
          example: "nick name"
        realName:
          type: string
          example: "real name"
        campus:
          type: integer
          description: 校区, 0-未定义，1-四平，2-嘉定，3-沪西，4-沪北
          default: 0
        college:
          type: string
          default: "sse"
        major:
          type: string
          default: "software engineering"
        grade:
          type: integer
          default: 0
      xml:
        name: User
    
    ###### User Info ######
    UserInfo:
      type: object
      properties:
        userId:
          type: integer
          example: 0
      
    ###### Favorite ######
    Favorite:
      type: object
      properties:
        favor_id:
          type: integer
          example: 0
        user_id:
          type: integer
          example: 14
        good_id:
          type: integer
          example: 234
          description: favorite goods of users
          
          
    ###### QuestionPost ######
    QuestionPost:
      type: object
      properties:
        q_post_id:
          type: integer
          example: 10
        user_id:
          example: 13
          type: integer
        time:
          type: string
          format: date-time
          example: "2020-12-12 00:00:00"
        q_content:
          type: string
          example: hi！
        q_title:
          type: string
          example: hi！
      xml:
        name: QuestionPost 
        
    ###### RecommendGoodsPost######
    RecommendGoodsPost:
      type: object
      properties:
        rg_post_id:
          type: integer
          example: 10
        user_id:
          example: 13
          type: integer
        time:
          type: string
          format: date-time
          example: "2020-12-12 00:00:00"
        rg_intro:
          type: string
          example: hi！
        rg_title:
          type: string
          example: hi！
        rg_tag:
          type: string
          example: hi！
      xml:
        name: RecommendGoodsPost 
        
    ###### AskForGoodsPost######
    AskForGoodsPost:
      type: object
      properties:
        afg_post_id:
          type: integer
          example: 10
        user_id:
          example: 13
          type: integer
        time:
          type: string
          format: date-time
          example: "2020-12-12 00:00:00"
        afg_intro:
          type: string
          example: hi！
        afg_title:
          type: string
          example: hi！
        afg_tag:
          type: string
          example: hi！
        afg_condition:
          type: string
          example: hi！
        campus:
          example: 13
          type: integer
        afg_price:
          example: 13.00
          type: number
      xml:
        name: AskForGoodsPost
    
    ###### QuestionPostReply######
    QuestionPostReply:
      type: object
      properties:
        q_reply_id:
          type: integer
          example: 10
        user_id:
          example: 13
          type: integer
        q_post_id:
          type: integer
          example: 10
        time:
          type: string
          format: date-time
          example: "2020-12-12 00:00:00"
        content:
          type: string
          example: hi！
      xml:
        name: QuestionPostReply
          
    ###### Good ######
    Good:
      type: object
      properties:
        good_id: 
          type: integer
          format: int64
          example: 0
        name:
          type: string
          example: "good name"
        status:
          type: integer
          description: 商品状态，0-正在售出，1-已出售
          default: 0
        price:
          type: string
          example: "23.5"
        description:
          type: string
          example: "description"
        campus:
          type: integer
          description: 校区，0-未定义，1-四平，2-嘉定，3-沪西，4-沪北
          default: 0
        old:
          type: integer
          description: 成色，x-x成新
          default: 10
        seller_id:
          type: integer
          example: "0000xxxx"
        pic_addr:
          type: string
          description: 商品图片在前端服务器上的地址
        publish_date:
          type: string
          format: date
          example: "2020-12-12 00:00:00"
        deposit:
          type: string
          description: 押金，随商品价格而变动
          example: "23.5"
        tag:
          type: string
          description: 以"str+str+str+……"的形式存储
      xml:
        name: Good

      
    ##############  以下是自定义的schema   ####################
    ###### Contacts ######
    Contacts:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      description: All contacts of a user
      
    ###### Messages ######
    Messages:
      type: object
      properties:
        sendedMessages:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
        receivedMessages:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
      description: All messages between two users
      
    ###### Favorite List ######
    FavoriteList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Favorite'
      description: All favorites of a user
      
    ###### AskForGoodsPost List ######
    AskForGoodsPostList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/AskForGoodsPost'
      description: All AskForGoodsPost of a user

  ###### RecommendGoodsPost List ######
    RecommendGoodsPostList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/RecommendGoodsPost'
      description: All RecommendGoodsPost of a user
      
    ###### QuestionPost List ######
    QuestionPostList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/QuestionPost'
      description: All QuestionPost of a user
    
    ###### QuestionPostReply List ######
    QuestionPostReplyList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/QuestionPostReply'
      description: All QuestionPostReply of a user

  
    ###### New Favorite ######
    NewFavorite:
      type: object
      properties:
        user_id:
          type: integer
        good_id:
          type: integer
    
    ###### Recommend List ######
    GoodList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Good'
      description: a list of goods searched for a user
    ###### Recommend List ######
    SearchCondition:
      type: object
      properties:
        goodName:
          type: string
          example: JavaEE Learning Book
        tags:
          type: string
          description: a string splited by `, no tags should be null
          example: new`onsale`freshman
        highestPrice:
          type: number
          example: 20.00
          description: if no, null
        lowestPrice:
          type: number
          example: 100.00
          description: if no, null
      description: a list of goods searched for a user
  requestBodies:
    Search:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchCondition'
        application/xml:
          schema:
            $ref: '#/components/schemas/SearchCondition'
      description: a searching
      required: true
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JEEgroup/JEEwork/1.0.0