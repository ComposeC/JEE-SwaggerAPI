openapi: 3.0.0
info:
  version: 1.0.0
  title: TJ Online 2nd-hand Trading
  description: Springboot API Design for Tongji Online Second-hand Trading Platform
tags:
  # 每个功能点一个tag
  - name: account
    description: 账户，包含未学生认证的
  - name: user
    description: 用户，已学生认证
  - name: chat
    description: chatting
  - name: favorite
    description: user's favorite
  - name: search
    description: search for goods
    
paths:
  '/favorite/add':
    post:
      tags:
        - favorite
      summary: add a new favorite
      operationId: addFavorite
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFavorite'
        description: a new favorite
        required: true
  '/favorite/get/{userId}':
    get:
      tags:
        - favorite
      summary: get all favorites of a user
      operationId: getFavoritesById
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteList'
            application/xml:
              schema:
                $ref: '#/components/schemas/Contacts'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/favorite/remove/{userId}/{goodId}':
    delete:
      tags:
        - favorite
      summary: remove a favorite
      operationId: deleteFavor
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
        - name: goodId
          in: path
          description: good id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Not found
  '/chat/addMessage':
    post:
      tags:
        - chat
      summary: add a new chatting message
      operationId: addMessage
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
        description: Created a new chatting message
        required: true
  '/chat/getContacts/{userId}':
    get:
      tags:
        - chat
      summary: get all contacts of a user
      operationId: getContactsById
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
            application/xml:
              schema:
                $ref: '#/components/schemas/Contacts'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/chat/getMessages/{senderId}/{receiverId}':
    get:
      tags:
        - chat
      summary: get all messages between two users
      operationId: getMessages
      parameters:
        - name: senderId
          in: path
          description: sender user id
          required: true
          schema:
            type: integer
        - name: receiverId
          in: path
          description: receiver user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Messages'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/search/GetRecommend/{userId}':
    get:
      tags:
        - search
      summary: get first page recommend for a user
      operationId: getRecommendById
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodList'
            application/xml:
              schema:
                $ref: '#/components/schemas/GoodList'
        '400':
          description: Invalid userid supplied
        '404':
          description: User not found
  '/search':
    post: # 有点不符合RESTful，不过为了方便就这样吧
      tags:
        - search
      summary: search goods by name, tags and price
      operationId: searchGoods
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodList'
            application/xml:
              schema:
                $ref: '#/components/schemas/GoodList'
        '400':
          description: Invalid string supplied
        '404':
          description: not found
      requestBody:
        $ref: '#/components/requestBodies/Search'

 	  
  '/user/add':
    post:
      tags:
        - user
      summary: 学生认证后增加用户
      operationId: addUser
      responses:
        '200':
          description: success
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  
  '/user/update':
    post:
      tags:
        - user
      summary: 修改用户个人信息
      operationId: updateUser
      responses:
        '200':
          description: success
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              
  '/user/get':
    post:
      tags:
        - user
      summary: 获取用户个人信息
      operationId: getUser
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid string supplied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
              

##################### Components ###############################
components:
  schemas:
  ##############  以下是数据库表对应的model   ####################
    ###### Account ######
    Account:
      type: object
      properties:
        accountId:
          type: integer
          example: 0
        openId:
          type: string
          example: "open id from wx"
        authenticated:
          type: boolean
          default: 0
        nickName:
          type: string
          example: "nick name"
        createTime:
          type: string
          format: date
          example: "2020-12-12 00:00:00"
        lastVisitTime:
          type: string
          format: date
          example: "2020-12-12 00:00:00"
      xml:
        name: Account
    
    ###### Chat ######
    Chat:
      type: object
      properties:
        sender_id:
          type: integer
          example: 10
        receiver_id:
          example: 13
          type: integer
        time:
          type: string
          format: date-time
          example: "2020-12-12 00:00:00"
        content:
          type: string
          example: hi！
      xml:
        name: Chat
        
    ###### User ######
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 0
        nickName:
          type: string
          example: "nick name"
        realName:
          type: string
          example: "real name"
        campus:
          type: integer
          description: 校区, 0-未定义，1-四平，2-嘉定，3-沪西，4-沪北
          default: 0
        college:
          type: string
          default: "sse"
        major:
          type: string
          default: "software engineering"
        grade:
          type: integer
          default: 0
      xml:
        name: User
    
    ###### User Info ######
    UserInfo:
      type: object
      properties:
        userId:
          type: integer
          example: 0
      
    ###### Favorite ######
    Favorite:
      type: object
      properties:
        favor_id:
          type: integer
          example: 0
        user_id:
          type: integer
          example: 14
        good_id:
          type: integer
          example: 234
          description: favorite goods of users
          
    ###### Good 没写完######
    Good:
      type: object
      properties:
        good_id: 
          type: integer
      description: Good
      
    ##############  以下是自定义的schema   ####################
    ###### Contacts ######
    Contacts:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      description: All contacts of a user
      
    ###### Messages ######
    Messages:
      type: object
      properties:
        sendedMessages:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
        receivedMessages:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
      description: All messages between two users
      
    ###### Favorite List ######
    FavoriteList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Favorite'
      description: All favorites of a user
      
    ###### New Favorite ######
    NewFavorite:
      type: object
      properties:
        user_id:
          type: integer
        good_id:
          type: integer
    
    ###### Recommend List ######
    GoodList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Good'
      description: a list of goods searched for a user
    ###### Recommend List ######
    SearchCondition:
      type: object
      properties:
        goodName:
          type: string
          example: JavaEE Learning Book
        tags:
          type: string
          description: a string splited by `, no tags should be null
          example: new`onsale`freshman
        highestPrice:
          type: number
          example: 20.00
          description: if no, null
        lowestPrice:
          type: number
          example: 100.00
          description: if no, null
      description: a list of goods searched for a user
  requestBodies:
    Search:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchCondition'
        application/xml:
          schema:
            $ref: '#/components/schemas/SearchCondition'
      description: a searching
      required: true
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JEEgroup/JEEwork/1.0.0